/* global global */
var UnexpectedMarkdown = require('unexpected-markdown');
var basename = require('path').basename;
var debug = require('debug')('metalsmith-unexpected-markdown');
var dirname = require('path').dirname;
var resolve = require('path').resolve;
var extname = require('path').extname;
var fs = require('fs');
var async = require('async');
var extend = require('extend');

function writeTestsToPen(pen, exampleTests) {
    pen.addStyle('escapedString', function (content) {
        this.text(JSON.stringify(content).replace(/^"|"$/g, ''));
    });

    pen.text('/*global unexpected*/').nl();
    pen.text('// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.').nl();
    pen.text('// It is built based on the examples in the documentation folder').nl();
    pen.text('// when the documentation site gets build by running "make site-build".').nl();
    pen.text('it.skipIf = function (condition) {').nl();
    pen.text('    (condition ? it.skip : it).apply(it, Array.prototype.slice.call(arguments, 1));').nl();
    pen.text('};').nl(2);

    pen.text('describe("documentation tests", function () {').nl();
    pen.indentLines();
    pen.i().text("var isBrowser = typeof weknowhow !== 'undefined';").nl();
    pen.i().text("var isPhantom = typeof mochaPhantomJS !== 'undefined';").nl();

    pen.i().text('var expect;').nl();
    pen.i().text('beforeEach(function () {').nl();
    pen.indentLines();
    pen.i().text('expect = unexpected.clone();').nl();
    pen.i().text("expect.output.preferredWidth = 80;").nl(2);
    pen.outdentLines();
    pen.i().text('});').nl(2);

    Object.keys(exampleTests).sort().forEach(function (file, index) {
        var tests = exampleTests[file];
        if (tests.length === 0) {
            return;
        }

        if (index > 0) {
            pen.nl();
        }

        pen.i().text('it("').text(file).text(' contains correct examples", function () {').nl();
        pen.indentLines();
        pen.i().text('var testPromises = [];').nl();

        tests.forEach(function (test, index) {
            if (index > 0) {
                pen.nl();
            }

            var conditions = [];
            if (test.flags.skipPhantom) {
                conditions.push('!isPhantom');
            }
            if (test.flags.skipBrowser) {
                conditions.push('!isBrowser');
            }

            if (conditions.length > 0) {
                pen.i().text('if (').text(conditions.join(' || ')).text(') {').nl();
                pen.indentLines();
            }

            // The freshExpect flag currently has a caveat:
            // https://github.com/unexpectedjs/metalsmith-unexpected-markdown/issues/1
            if (test.flags.freshExpect) {
                pen.i().text('expect = unexpected.clone();').nl();
                pen.i().text("expect.output.preferredWidth = 80;").nl(2);
            }

            var lines;
            if (test.flags.async) {
                if (test.output) {
                    pen.i().text('testPromises.push(expect.promise(function () {').nl();
                    pen.indentLines();
                    pen.i().block('text', test.code).nl();
                    pen.outdentLines();
                    pen.i().text('}).then(function () {').nl();
                    pen.indentLines();
                    pen.i().text('return expect.promise(function () {').nl();
                    pen.indentLines();
                    pen.i().text('expect.fail(function (output) {').nl();
                    pen.indentLines();
                    pen.i().text('output.error("expected:").nl();').nl();
                    test.code.split(/\n/).forEach(function (line, index) {
                        pen.i().text('output.code("').escapedString(line).text('").nl();').nl();
                    });
                    pen.i().text('output.error("to throw");').nl();
                    pen.outdentLines();
                    pen.i().text('});').nl();
                    pen.outdentLines();
                    pen.i().text('});').nl();
                    pen.outdentLines();
                    pen.i().text('}).caught(function (e) {').nl();
                    pen.indentLines();
                    pen.i().text('expect(e, "to have message",').nl();
                    pen.indentLines();
                    lines = test.output.split(/\n/);
                    lines.forEach(function (line, index) {
                        pen.i().text('"').escapedString(line);
                        if (index < lines.length - 1) {
                            pen.text('\\n" +').nl();
                        } else {
                            pen.text('"');
                        }
                    });
                    pen.nl();
                    pen.outdentLines();
                    pen.i().text(');').nl();
                    pen.outdentLines();
                    pen.i().text('}));').nl();
                } else {
                    pen.i().text('testPromises.push(expect.promise(function () {').nl();
                    pen.indentLines();
                    pen.i().block('text', test.code);
                    pen.outdentLines();
                    pen.nl().i().text('}));');
                }
            } else {
                if (test.output) {
                    pen.i().text('try {').nl();
                    pen.indentLines();
                    pen.i().block('text', test.code).nl();
                    pen.i().text('expect.fail(function (output) {').nl();
                    pen.indentLines();
                    pen.i().text('output.error("expected:").nl();').nl();
                    test.code.split(/\n/).forEach(function (line, index) {
                        pen.i().text('output.code("').escapedString(line).text('").nl();').nl();
                    });
                    pen.i().text('output.error("to throw");').nl();
                    pen.outdentLines();
                    pen.i().text('});').nl();
                    pen.outdentLines();
                    pen.i().text('} catch (e) {').nl();
                    pen.indentLines();
                    pen.i().text('expect(e, "to have message",').nl();
                    pen.indentLines();
                    lines = test.output.split(/\n/);
                    lines.forEach(function (line, index) {
                        pen.i().text('"').escapedString(line);
                        if (index < lines.length - 1) {
                            pen.text('\\n" +').nl();
                        } else {
                            pen.text('"');
                        }
                    });
                    pen.nl();
                    pen.outdentLines();
                    pen.i().text(');').nl();
                    pen.outdentLines();
                    pen.i().text('}');
                } else {
                    pen.i().block('text', test.code);
                }
            }

            pen.nl();
            if (conditions.length > 0) {
                pen.outdentLines();
                pen.i().text('}').nl();
            }
        });

        pen.i().text('return expect.promise.all(testPromises);').nl();
        pen.outdentLines();
        pen.i().text('});').nl();
    });
    pen.outdentLines();
    pen.text('});').nl();
}

module.exports = function plugin(pluginOptions) {
    pluginOptions = pluginOptions || {};

    return function (files, metalsmith, next) {
        var exampleTests = {};
        var sourcePath = metalsmith.source();

        async.series([
            function (cb) {
                var markdownFiles = Object.keys(files).filter(function (file) {
                    return /\.md|\.markdown/.test(extname(file));
                }).sort();

                async.eachSeries(markdownFiles, function (file, cb) {
                    debug('checking file: %s', file);
                    var theme = files[file].theme;
                    var data = files[file];
                    var content = data.contents.toString();
                    var options = extend({}, { theme: theme }, pluginOptions);

                    var markdown = new UnexpectedMarkdown(content);
                    var tasks = [];
                    if (options.updateExamples) {
                        tasks.push(function (cb) {
                            markdown.withUpdatedExamples(options).then(function (updatedMarkdown) {
                                markdown = updatedMarkdown;
                                cb();
                            }).catch(cb);
                        });
                        tasks.push(function (cb) {
                            debug('updating examples in file: %s', file);
                            var absoluteFilePath = resolve(sourcePath, file);
                            async.waterfall([
                                function (cb) {
                                    // read file again to avoid removing metadata from the file
                                    fs.readFile(absoluteFilePath, cb);
                                },
                                function (data, cb) {
                                    new UnexpectedMarkdown(data.toString()).withUpdatedExamples(options).then(function (markdownForFile) {
                                        cb(null, markdownForFile);
                                    }).catch(cb);
                                },
                                function (markdown, cb) {
                                    fs.writeFile(absoluteFilePath, markdown.toString(), 'utf8', cb);
                                }
                            ], cb);
                        });
                    }

                    if (options.testFile) {
                        tasks.push(function (cb) {
                            debug('collecting tests for: %s', file);

                            async.waterfall([
                                function (cb) {
                                    markdown.getSnippets(options, cb);
                                },
                                function (snippets, cb) {
                                    var tests = snippets.getTests();
                                    if (tests.length > 0) {
                                        exampleTests[file] = tests;
                                    }
                                    cb();
                                }
                            ], cb);
                        });
                    }

                    tasks.push(function (cb) {
                        async.waterfall([
                            function (cb) {
                                debug('generating html for: %s', file);
                                markdown.toHtml(options).then(function (html) {
                                    cb(null, html);
                                }).catch(cb);
                            },
                            function (html, cb) {
                                data.contents = Buffer.from(html);
                                delete files[file];
                                debug('converting file: %s', file);
                                var dir = dirname(file);
                                var htmlFile = basename(file, extname(file)) + '.html';
                                if ('.' !== dir) { htmlFile = dir + '/' + htmlFile; }
                                files[htmlFile] = data;
                                cb();
                            }
                        ], cb);
                    });

                    async.series(tasks, cb);
                }, cb);
            },
            function (cb) {
                if (pluginOptions.testFile && Object.keys(exampleTests).length > 0) {
                    debug('generating tests to: %s', pluginOptions.testFile);
                    var unexpected = pluginOptions.unexpected || require('unexpected');
                    var pen = unexpected.output.clone();
                    pen.indentationWidth = 4;
                    writeTestsToPen(pen, exampleTests);
                    fs.writeFile(pluginOptions.testFile, pen.toString(), cb);
                } else {
                    cb();
                }
            }
        ], next);
    };
};
